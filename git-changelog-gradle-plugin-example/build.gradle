apply plugin: 'java-gradle-plugin'

buildscript {
 repositories {
  mavenLocal()
  mavenCentral()
 }

 dependencies {
  classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:+"
 }
}

apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

//
// Set references to create releasenotes for version 1.1
//
task generateGitReleasenotes11RepoPath(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 file = file("whatever/CHANGELOG_1_0_1_1_repo_path.md");
 prependToFile = false; // false will replace the file, true will prepend content
 fromRepo = file(".");
 fromRef = "1.0";
 toRef = "1.1";
 templateContent = """
# Releasenotes in 1.1

Releasenotes.

{{#issues}}
 {{#hasLink}}
## {{name}} [{{issue}}]({{link}}) {{title}}
 {{/hasLink}}
 {{^hasLink}}
## {{name}}
 {{/hasLink}}
 {{#commits}}
  {{{hash}}}
  {{{message}}}

 {{/commits}}

{{/issues}}
""";
}

//
// Settings file
//
//task generateGitChangelogSettings(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
// settingsFile = file("changelog.json").getAbsolutePath();
// file = new File("CHANGELOG_settings.md");
//}

//
// MediaWiki page
//
//task generateGitChangelogMediaWiki(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
// mediaWikiUrl = "http://localhost/mediawiki/";
// mediaWikiTitle = "Tomas Title";
// mediaWikiUsername = "tomas";
// mediaWikiPassword = "tomaskod";
//}

//
// Template configured inline
//
task generateGitChangelogInlineTemplate(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = file("CHANGELOG_inline.md");
 templateContent = """
# Git Changelog Maven plugin changelog

Changelog of Git Changelog Maven plugin.

{{#tags}}
## {{name}}
 {{#issues}}
  {{#hasLink}}
### {{name}} [{{issue}}]({{link}}) {{title}}
  {{/hasLink}}
  {{^hasLink}}
### {{name}}
  {{/hasLink}}

  {{#commits}}
[{{hash}}](https://github.com/tomasbjerre/git-changelog-maven-plugin/commit/{{hash}}) {{authorName}} *{{commitTime}}*

{{{message}}}

  {{/commits}}

 {{/issues}}
{{/tags}}
 """;
}

//
// Partials
//
task generateGitChangelogWithPartials(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = file("CHANGELOG_partials.md");
 templateBaseDir = file(".")
 templateSuffix = ".partial"
 templateContent = """
# Git Changelog Maven plugin changelog

Changelog of Git Changelog Maven plugin.

{{#tags}}
## {{name}}
 {{#issues}}
  {{#hasLink}}
{{>changelog_linkedIssue}}
  {{/hasLink}}
  {{^hasLink}}
### {{name}}
  {{/hasLink}}

  {{#commits}}
[{{hash}}](https://github.com/tomasbjerre/git-changelog-maven-plugin/commit/{{hash}}) {{authorName}} *{{commitTime}}*

{{{message}}}

  {{/commits}}

 {{/issues}}
{{/tags}}
 """;
}

//
// Template from file
//
task generateGitChangelogTemplateFromFile(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = new File("CHANGELOG_file.md");
 templateContent = file('changelog.mustache').getText('UTF-8');
}

//
// Template from file and GitHub token
//
task generateGitChangelogTemplateWithGitHubIssues(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 gitHubApi = "https://api.github.com/repos/tomasbjerre/git-changelog-gradle-plugin";
 gitHubToken = System.properties['GITHUB_OAUTH2TOKEN'];
 gitHubIssuePattern = "#([0-9]*)";
 gitHubEnabled = true;
 file = new File("CHANGELOG.md");
 templateContent = file('changelog.mustache').getText('UTF-8');
}

//
// Template from file and GitLab token
//
//task generateGitChangelogTemplateWithGitLabIssues(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
// gitLabServer = "https://gitlab.com/";
// gitLabProjectName = "tomas.bjerre85/violations-test";
// gitLabToken = System.properties['GITLAB_TOKEN'];
// gitLabEnabled = true;
// file = new File("CHANGELOG_GITLAB.md");
// templateContent = file('changelog.mustache').getText('UTF-8');
//}

//
// Template from file and Jira login
//
//task generateGitChangelogTemplateFromFileAndJira(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
// jiraEnabled = true;
// jiraUsername = System.properties['JIRA_USERNAME'];
// jiraPassword = System.properties['JIRA_PASSWORD'];
// jiraIssuePattern = "\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\b";
// jiraServer = "https://yourJiraServer.com/jira";
// file = new File("CHANGELOG_jira.md");
// templateContent = file('changelog.mustache').getText('UTF-8');
//}

//
// Set reference to create changelog for version 1.1
//
task generateGitChangelog11(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = new File("CHANGELOG_1_1.md");
 toRef = "1.1";
 templateContent = """
{{#issues}}
 {{#commits}}
  {{{hash}}}
 {{/commits}}
{{/issues}}
""";
}

//
// Set references to create releasenotes for version 1.1
//
task generateGitReleasenotes11(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = new File("CHANGELOG_1_0_1_1.md");
 fromRef = "1.0";
 toRef = "1.1";
 templateContent = """
# Releasenotes in 1.1

Releasenotes.

{{#issues}}
 {{#hasLink}}
## {{name}} [{{issue}}]({{link}}) {{title}}
 {{/hasLink}}
 {{^hasLink}}
## {{name}}
 {{/hasLink}}
 {{#commits}}
  {{{hash}}}
  {{{message}}}

 {{/commits}}

{{/issues}}
""";
}

//
// Set commits to view changes between them. You may use properties
// for the from and to commit to inject hashes from command line.
//
task generateGitChangelogCommits(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = new File("CHANGELOG_commits.md");
 fromCommit = "d5657ba4353bff4c8924981d4da4aacfcbd9bd54";
 toCommit = "3568f412a65a16d1848d8d5316a7cb30261cf271";
 templateContent = """
# Releasenotes in 1.1

Releasenotes.

{{#issues}}
 {{#hasLink}}
## {{name}} [{{issue}}]({{link}}) {{title}}
 {{/hasLink}}
 {{^hasLink}}
## {{name}}
 {{/hasLink}}
 {{#commits}}
  {{{hash}}}
  {{{message}}}

 {{/commits}}

{{/issues}}
""";
}

//
// Mixed features
//
task generateGitChangelogMixed(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 readableTagName = ".*/([^/]*)";
 dateFormat = "HH:mm:ss";
 timeZone = "UTC";
 removeIssueFromMessage = false;
 ignoreCommitsIfMessageMatches = ".*Gradle.*";
 ignoreTagsIfNameMatches = ".*[0-9]{2}\$";
 untaggedName = "These commits are not included in any tag";
 noIssueName = "These commits have not issue in their commit comment";
 file = new File("CHANGELOG_mixed.md");
 templateContent = """
# Git Changelog Maven plugin changelog

Changelog of Git Changelog Maven plugin.

{{#tags}}
## {{name}}
 {{#issues}}
### {{name}}
  {{#commits}}
   {{{message}}} *{{commitTime}}*

  {{/commits}}

 {{/issues}}

{{/tags}}
 """;
}

//
// Mixed features
//
task generateGitChangelogIgnoreCommitsWithoutIssue(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 // If a commit cannot be mapped to a configured issue, it will not 
 // be included if set to true. If set to true, noIssueName has no effect.
 ignoreCommitsWithoutIssue = true;
 customIssues = [
  [ "Incident", "INC[0-9]*", "http://inc/\${PATTERN_GROUP}", "\${PATTERN_GROUP}" ]
 ]
 file = new File("CHANGELOG_ignoreCommitsWithoutIssue.md");
 templateContent = """
# Git Changelog

Changelog of Git Changelog.

{{#tags}}
## {{name}}
 {{#issues}}
### {{name}}
  {{#commits}}
   {{{message}}} *{{commitTime}}*

  {{/commits}}

 {{/issues}}

{{/tags}}
 """;
}

//
// Ignore old commits
//
task generateGitChangelogIgnoreCommitsOlderThan(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 ignoreCommitsOlderThan = Date.parse("yyyy-MM-dd hh:mm:ss", "2017-05-20 00:00:00");
 file = new File("CHANGELOG_ignoreCommitsOlderThan.md");
 templateContent = """
# Git Changelog

Changelog of Git Changelog.

{{#tags}}
## {{name}}
 {{#issues}}
### {{name}}
  {{#commits}}
   {{{message}}} *{{commitTime}}*

  {{/commits}}

 {{/issues}}

{{/tags}}
 """;
}

//
// Custom issues
//
task generateGitChangelogCustomIssues(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
 fromRepo = file(".");
 file = new File("CHANGELOG_custom.md");
 customIssues = [
  [ "Incident", "INC[0-9]*", "http://inc/\${PATTERN_GROUP}", "\${PATTERN_GROUP}" ],
  [ "QC", "QC([0-9]+)", "", "\${PATTERN_GROUP}" ],
  [ "Issue", "I([0-9]+)" ]
 ]
 templateContent = """
# Git Changelog Maven plugin changelog

Changelog of Git Changelog Maven plugin.

{{#tags}}
## {{name}}
 {{#issues}}
  {{#hasLink}}
### {{name}} [{{issue}}]({{link}}) {{title}}
  {{/hasLink}}
  {{^hasLink}}
### {{name}}
  {{/hasLink}}
  {{#commits}}
   {{{message}}}

  {{/commits}}

 {{/issues}}

{{/tags}}
 """;
}


tasks.register("generateChangelogs") {
 doLast { }
}

generateChangelogs.dependsOn {
  tasks.findAll { task -> task.name.startsWith('generateGit') }
}

sourceSets {
 main.java.srcDirs = ['src/main/java']
}
